//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constants
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
static const int SIZE           = 0;
static const int MEMORY_TYPE	= 1;
static const int DATA           = 2;

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - internal
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
static void testIndex(int vector, int index) {
    if (index >= memoryInt[vector]) {
        if (0 != memoryInt[vector]) {
            memoryInt[vector + DATA] = getMemoryBlockAddress(resizeArrayEx(getPointerAddress(memoryInt[vector + DATA], memoryInt[vector + MEMORY_TYPE]), index + 1, memoryInt[vector + MEMORY_TYPE]), memoryInt[vector + MEMORY_TYPE]);
        } //if
        else {
            memoryInt[vector + DATA] = getMemoryBlockAddress(allocate(index + 1, memoryInt[vector + MEMORY_TYPE]), memoryInt[vector + MEMORY_TYPE]);
            clearArrayRangeBlockEx(memoryInt[vector + DATA], 0, index, memoryInt[vector + MEMORY_TYPE]);
        } //else
		
		memoryInt[vector] = index + 1;
    } //if
} //textIndex

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - getters
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int vectorGetPointerBlock(int vector, int index) {
    testIndex(vector, index);
    return memoryInt[vector + DATA] + index;
} //vectorGetData

int vectorGetPointer(int vector, int index) {
    return getPointerAddress(vectorGetPointerBlock(vector, index), memoryInt[vector + MEMORY_TYPE]);
} //vectorGetData

int vectorGetSize(int vector) 		{ return memoryInt[vector]; 															}
int vectorGetArray(int vector) 		{ return getPointerAddress(memoryInt[vector + DATA], memoryInt[vector + MEMORY_TYPE]); 	}
int vectorGetArrayBlock(int vector) { return memoryInt[vector + DATA]; 														}
int vectorGetMemoryType(int vector) { return memoryInt[vector + MEMORY_TYPE]; 												}

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - functions
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
void vectorResize(int vector, int size) {
    if (1 > size) { size = 0; }
    if (memoryInt[vector] == size) { return; }
    
    if (0 == size) {
        if (0 != memoryInt[vector]) {
            deallocateEx(getPointerAddress(memoryInt[vector + DATA], memoryInt[vector + MEMORY_TYPE]), memoryInt[vector + MEMORY_TYPE]);
            memoryInt[vector + DATA] = 0;
        } //if
    } //if
    else if (0 == memoryInt[vector]) {
        memoryInt[vector + DATA] = getMemoryBlockAddress(allocate(size, memoryInt[vector + MEMORY_TYPE]), memoryInt[vector + MEMORY_TYPE]);
        clearArrayRangeBlockEx(memoryInt[vector + DATA], 0, size - 1, memoryInt[vector + MEMORY_TYPE]);
    } //if
    else {
        memoryInt[vector + DATA] = getMemoryBlockAddress(resizeArray(getPointerAddress(memoryInt[vector + DATA], memoryInt[vector + MEMORY_TYPE]), size), memoryInt[vector + MEMORY_TYPE]);
    } //else
    
    memoryInt[vector] = size;
} //vectorResize

void vectorCopy(int vectorToBeCopied, int vectorToCopyTo) {
    vectorResize(vectorToCopyTo, memoryInt[vectorToBeCopied]);
    copyArrayEx(getPointerAddress(memoryInt[vectorToBeCopied + DATA], memoryInt[vectorToBeCopied + MEMORY_TYPE]), getPointerAddress(memoryInt[vectorToCopyTo + DATA], memoryInt[vectorToBeCopied + MEMORY_TYPE]), memoryInt[vectorToBeCopied + MEMORY_TYPE]);
} //vectorCopy

void vectorClear(int vector) {
    if (0 != memoryInt[vector]) {
        deallocateEx(getPointerAddress(memoryInt[vector + DATA], memoryInt[vector + MEMORY_TYPE]), memoryInt[vector + MEMORY_TYPE]);
    } //if
    
    memoryInt[vector] = 0;
} //vectorClear

void vectorPushFront(int vector) {
	int memoryType = memoryInt[vector + MEMORY_TYPE];
	int size = memoryInt[vector] + 1;
    int arr;

	int localPointers = allocate(2, memoryType);
	int old = getMemoryBlockAddress(localPointers, memoryType);
	int pointer = old + 1;
	
    vectorResize(vector, size);
    
    arr = memoryInt[vector + DATA];
	size = arr + size;
    while (arr != size) {
		setPointerValueBlockEx(old, arr, memoryType);
		setPointerValueBlockEx(arr, pointer, memoryType);
		setPointerValueBlockEx(pointer, old, memoryType);
        
        arr = arr + 1;
    } //while
	
	deallocateEx(localPointers, memoryType);
} //vectorPushFrontBlock

void vectorPopFront(int vector) {
	int memoryType = memoryInt[vector + MEMORY_TYPE];
    int end;
    int arr;
    
    arr = memoryInt[vector + DATA];
    end = arr + memoryInt[vector] - 1;
    while (arr < end) {
		setPointerValueBlockEx(arr, arr + 1, memoryType);
        arr = arr + 1;
    } //while

    vectorResize(vector, memoryInt[vector] - 1);
} //stackPop

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constructor
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int vectorCreate(int memoryType) {
    int vector = getMemoryBlockAddress(allocate(3, MEMORY_TYPE_INT), MEMORY_TYPE_INT);

    memoryInt[vector                ] = 0;
	memoryInt[vector + MEMORY_TYPE 	] = memoryType;
    memoryInt[vector + DATA         ] = 0;

    return vector;
} //stackCreate

void vectorDestroy(int vector) {
    vectorClear(vector);
	
    deallocateEx(getPointerAddress(vector, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //stackDestroy