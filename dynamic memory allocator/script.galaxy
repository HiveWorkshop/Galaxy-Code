//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - memory address initialization
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    static int 		[mem_type_count] mem_size;
    static string 	[mem_type_count] mem_name;

    static void init_mem() {
		mem_size[mem_type_abilcmd]          	= mem_size_abilcmd;
		mem_size[mem_type_actor]          		= mem_size_actor;
		mem_size[mem_type_actorscope]       	= mem_size_actorscope;
		mem_size[mem_type_aifilter]         	= mem_size_aifilter;
		mem_size[mem_type_bank]             	= mem_size_bank;
		mem_size[mem_type_bool]             	= mem_size_bool;
		mem_size[mem_type_byte]             	= mem_size_byte;
		mem_size[mem_type_camerainfo]       	= mem_size_camerainfo;
		mem_size[mem_type_color]            	= mem_size_color;
		mem_size[mem_type_doodad]           	= mem_size_doodad;
		mem_size[mem_type_fixed]            	= mem_size_fixed;
		mem_size[mem_type_int]              	= mem_size_int;
		mem_size[mem_type_marker]           	= mem_size_marker;
		mem_size[mem_type_order]            	= mem_size_order;
		mem_size[mem_type_playergroup]      	= mem_size_playergroup;
		mem_size[mem_type_point]            	= mem_size_point;
		mem_size[mem_type_region]           	= mem_size_region;
		mem_size[mem_type_revealer]         	= mem_size_revealer;
		mem_size[mem_type_sound]            	= mem_size_sound;
		mem_size[mem_type_soundlink]        	= mem_size_soundlink;
		mem_size[mem_type_string]           	= mem_size_string;
		mem_size[mem_type_text]             	= mem_size_text;
		mem_size[mem_type_timer]            	= mem_size_timer;
		mem_size[mem_type_transmissionsource]	= mem_size_transmissionsource;
		mem_size[mem_type_trigger]         		= mem_size_trigger;
		mem_size[mem_type_unit]             	= mem_size_unit;
		mem_size[mem_type_unitfilter]       	= mem_size_unitfilter;
		mem_size[mem_type_unitgroup]        	= mem_size_unitgroup;
		mem_size[mem_type_unitref]          	= mem_size_unitref;
		mem_size[mem_type_wave]             	= mem_size_wave;
		mem_size[mem_type_waveinfo]         	= mem_size_waveinfo;
		mem_size[mem_type_wavetarget]       	= mem_size_wavetarget;

		mem_name[mem_type_abilcmd]          	= "abilcmd";
		mem_name[mem_type_actor]          		= "actor";
		mem_name[mem_type_actorscope]       	= "actorscope";
		mem_name[mem_type_aifilter]         	= "aifilter";
		mem_name[mem_type_bank]             	= "bank";
		mem_name[mem_type_bool]             	= "bool";
		mem_name[mem_type_byte]             	= "byte";
		mem_name[mem_type_camerainfo]       	= "camerainfo";
		mem_name[mem_type_color]            	= "color";
		mem_name[mem_type_doodad]           	= "doodad";
		mem_name[mem_type_fixed]            	= "fixed";
		mem_name[mem_type_int]              	= "int";
		mem_name[mem_type_marker]           	= "marker";
		mem_name[mem_type_order]            	= "order";
		mem_name[mem_type_playergroup]      	= "playergroup";
		mem_name[mem_type_point]            	= "point";
		mem_name[mem_type_region]           	= "region";
		mem_name[mem_type_revealer]         	= "revealer";
		mem_name[mem_type_sound]            	= "sound";
		mem_name[mem_type_soundlink]        	= "soundlink";
		mem_name[mem_type_string]           	= "string";
		mem_name[mem_type_text]             	= "text";
		mem_name[mem_type_timer]            	= "timer";
		mem_name[mem_type_transmissionsource]	= "transmissionsource";
		mem_name[mem_type_trigger]         		= "trigger";
		mem_name[mem_type_unit]             	= "unit";
		mem_name[mem_type_unitfilter]       	= "unitfilter";
		mem_name[mem_type_unitgroup]        	= "unitgroup";
		mem_name[mem_type_unitref]          	= "unitref";
		mem_name[mem_type_wave]             	= "wave";
		mem_name[mem_type_waveinfo]         	= "waveinfo";
		mem_name[mem_type_wavetarget]       	= "wavetarget";
    } //initializeMemoryTypeAddresses
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - memory instance count
//
//		arrays allocate from the left
//		scalars allocate from the right
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
static int[mem_type_count] mem_l;
static int[mem_type_count] mem_r;

static void init_mem_alloc_new() {
	int type = 0;
	
	while (type < mem_type_count) {
		mem_l[type] = 1;
		mem_r[type] = mem_size[type];
		type = type + 1;
	} //while
} //initializeMemoryInstanceCount

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - stack
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
	static int[mem_type_count] stack;
	static int stack_ptr = 0;
	
	static void mem_push_ptr(int ptr) {
		mem_int[ptr] = stack_ptr;
		stack_ptr = ptr;
	} //mem_push_ptr
	static int mem_pop_ptr() {
		int ptr;
		
		if (stack_ptr == 0) {
			ptr = mem_r[mem_type_int] - 2;
			if (ptr <= mem_l[mem_type_int]) { return 0; }
			mem_r[mem_type_int] = ptr;
		} //if
		else {
			ptr = stack_ptr;
			stack_ptr = mem_int[ptr];
		} //else
		
		return ptr;
	} //mem_pop_ptr
	
	static bool ptr_pop_dat(int ptr, int type, int size) {
		int dat;
		
		if (1 == size) {
			dat = mem_r[type] - 1;
			if (dat <= mem_l[type]) {
				mem_push_ptr(ptr);
				return false;
			}
			mem_r[type] = dat;
		} //if
		else {
			dat = mem_l[type];
			if (dat + size >= mem_r[type]) {
				mem_push_ptr(ptr);
				return false;
			}
			mem_l[type] = dat + size;
		} //else
		
		mem_int[ptr] = (dat << 1) + 1 << 12;
		mem_int[ptr + 1] = ((size << 1) + 1 << 12) + type;
		
		return true;
	}
	
	int mem_pop(int type) {
		int ptr = stack[type];
		int dat;

		if (ptr == -1) {
			ptr = mem_pop_ptr();
			if (0 == ptr || !ptr_pop_dat(ptr, type, 1)) { return 0; }
		} //if
		else {
			stack[type] = mem_int[ptr + 1];
			mem_int[ptr + 1] = (1 << 13) + type;
		} //else
		
		mem_int[ptr] = (mem_int[ptr] >> 12 << 12) + 1;
		
		return ptr;
	} //getPointer
	
	void mem_push(int ptr) {
		int type = 4096 + (mem_int[ptr + 1] << 19 >> 19);
		mem_int[ptr + 1] = stack[type];
		stack[type] = ptr;
	} //pushPointer
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - heap
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
	static const int heap_sz_mx = mem_size_int/10;
	static int[heap_sz_mx] heap;
	static int heap_sz = 0;
	
	static void heap_bubbleDown(int pos) {
		int ptr = heap[pos];
		int ptr_sz = mem_int[ptr + 1];
	
		int ptr_l;
		int ptr_r;
		
		int ptr_l_sz;
		int ptr_r_sz;

		while (pos < heap_sz) {
			ptr_l = heap[pos << 1];
			ptr_r = heap[(pos << 1) + 1];
			ptr_l_sz = mem_int[ptr_l + 1];
			ptr_r_sz = mem_int[ptr_r + 1];
		
			if (ptr_l_sz > ptr_sz && ptr_l_sz >= ptr_r_sz) {
				heap[pos] = ptr_l;
				pos = pos << 1;
			} //if
			else if (ptr_r_sz > ptr_sz) {
				heap[pos] = ptr_r;
				pos = (pos << 1) + 1;
			} //else if
			else {
				break;
			} //else
		} //while

		heap[pos] = ptr;
	} //bubbleDown
	
	static void heap_bubbleUp(int pos) {
		int ptr = heap[pos];
		int ptr_sz = mem_int[ptr + 1];
		int pos_p  = pos >> 1;
		int ptr_p   = heap[pos_p];

		while (0 != pos_p && mem_int[ptr_p + 1] < ptr_sz) {
			heap[pos] = ptr_p;
			
			pos = pos_p;
			pos_p = pos_p >> 1;
			ptr_p = heap[pos_p];
		} //while

		heap[pos] = ptr;
	} //bubbleUp
	
	static void heap_pop() {
		heap[1] = heap[heap_sz];
		heap[heap_sz] = 0;
		heap_sz = heap_sz - 1;
		heap_bubbleDown(1);
	} //heapPop
	
	static void heap_compact() {
		int pos = 1;
		int pos2;
		
		int ptr;
		int ptr2;
		
		bool merged = false;
		
		while (pos <= heap_sz) {
			DataTableSetInt(false, IntToString(mem_int[heap[pos]] >> 13), pos);
			pos = pos + 1;
		} //while
		
		pos = 1;
		while (pos <= heap_sz) {
			ptr = heap[pos];
			pos2 = DataTableGetInt(false, IntToString((mem_int[ptr] >> 13) + (mem_int[ptr + 1] >> 13)));
			
			if (pos2 != 0) {
				merged = true;
			
				if (mem_int[ptr] < mem_int[heap[pos2]]) {
					ptr = heap[pos];
					ptr2 = heap[pos2];
				} //if
				else {
					ptr = heap[pos2];
					ptr2 = heap[pos];
				} //else
				
				heap[pos] = ptr;
				heap[pos2] = heap[heap_sz];
				heap_sz = heap_sz - 1;
				
				heap_bubbleUp(pos2);
				heap_bubbleDown(pos2);
				
				mem_int[ptr + 1] = ((((mem_int[ptr + 1] >> 13) + (mem_int[ptr2 + 1] >> 13)) << 1) + 1 << 12) + 4096 + (mem_int[ptr + 1] << 19 >> 19);
				
				mem_push_ptr(ptr2);
			} //if
			else if (merged) {
					heap_bubbleUp(pos);
					merged = false;
					
					if (heap[pos] == ptr) { pos = pos + 1; }
				} //if
			else {
				pos = pos + 1;
			} //else
		} //while
		
		if (heap_sz != 1) { pos = 0/0; }
	}
	
	void heap_push(int ptr) {
		int t1;
		int t2;
	
		heap_sz = heap_sz + 1;
		heap[heap_sz] = ptr;
		heap_bubbleUp(heap_sz);
		
		t1 = mem_int[ptr];
		t2 = mem_int[ptr + 1];
		
		if (t1 == 0 || t2 == 0) { ptr = 0/0; }
	} //heapPush

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - destructor creation
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
	static int free_count = 0;
	
	int mem_gen_free(funcref<free> f) {
		mem_free[free_count] = f;
		free_count = free_count + 1;
		return free_count - 1;
	} //mem_gen_free

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - memory allocation
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    int malloc(int size, int type) {
        int ptr;
		int h_ptr;
		int h_sz;
		
		int t1;
		int t2;
		int t3;
		int t4;
		int t5;
		
		if (size == 1) {
			ptr = mem_pop(type);
			if (0 == ptr) { return 0/0; }
		}
		else {
			if (heap_sz == 0 || mem_int[heap[1] + 1] >> 13 < size) {
				ptr = mem_pop_ptr();
				
				if (0 == ptr || !ptr_pop_dat(ptr, type, size)) {
					if (heap_sz == 0) { return 0/0; }
					
					heap_compact();
					
					if (mem_int[heap[1] + 1] >> 13 < size) {
						return 0/0;
					} //if
				}
			} //if
			
			if (ptr == 0) {
				h_ptr = heap[1];
				h_sz = mem_int[h_ptr + 1] >> 13;
				t4 = mem_int[h_ptr];
				t5 = mem_int[h_ptr + 1];
				if (h_sz > size) {
					ptr = mem_pop_ptr();
					if (0 == ptr) { return 0/0; }
					
					mem_int[ptr] = mem_int[h_ptr];
					mem_int[h_ptr] = ((mem_int[h_ptr] >> 13) + size << 1) + 1 << 12;
					mem_int[h_ptr + 1] = ((h_sz - size << 1) + 1 << 12) + type;
					
					heap_bubbleDown(1);
				} //if
				else {
					ptr = h_ptr;
					heap_pop();
					
					t4 = mem_int[ptr];
					if (t4 == 0) { return 0/0; }
				} //else
			} //else
			
			t4 = mem_int[ptr];
			if (t4 == 0) { return 0/0; }
			
			mem_int[ptr] = mem_int[ptr] >> 12 << 12;
			mem_int[ptr + 1] = ((size << 1) + 1 << 12) + type;
		} //else
		
		t1 = sizeof(ptr);
		t2 = typeof(ptr);
		t3 = 4096 + (mem_int[ptr]  << 19 >> 19);
		t4 = mem_int[ptr];
		t5 = mem_int[ptr + 1];
		
		if (t1 != size) { return 0/0; }
		if (t2 != type) { return 0/0; }
		if (t3 != 0) { return 0/0; }
		
        return ptr;
    } //malloc
	
	static void free_arr(int ptr) { heap_push(ptr); }
	
	int sizeof(int ptr) { return mem_int[ptr + 1] >> 13; }
	int typeof(int ptr) { return 4096 + (mem_int[ptr + 1] << 19 >> 19); }
	int datof(int ptr) { return mem_int[ptr] >> 13; }
	
	void set_dest(int ptr, int dest) { mem_int[ptr] = (mem_int[ptr] >> 12 << 12) + dest; }
	void set_type(int ptr, int type) { mem_int[ptr + 1] = (mem_int[ptr + 1] >> 12 << 12) + type; }
	
	void free(int ptr) { mem_free[4096 + (mem_int[ptr] << 19 >> 19)](ptr); }
	
	void freeEx(int ptr, int type) {
		mem_int[ptr + 1] = (mem_int[ptr + 1] >> 12 << 12) + type;
		if (mem_int[ptr + 1] >> 13 == 1)	{ mem_push(ptr); 	}
		else 								{ heap_push(ptr); 	}
	}
	
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - debug
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//int getRemainingMemory			(int memoryType) { return releasedMemory[memoryType]; }
//int getBiggestAllocBlock			(int memoryType) { return heapGetWeight(heapGetFirst(memoryTypeName[memoryType])); }
//void printMemoryRemaining       	(int memoryType) { TriggerDebugOutput(1, StringToText("Memory Remaining (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + IntToText(getRemainingMemory(memoryType)), false); }
//void printMemoryUsed            	(int memoryType) { TriggerDebugOutput(1, StringToText("Memory Usage (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + IntToText(memoryTypeSize[memoryType] - releasedMemory[memoryType]), false); }
//void printMemoryUsedPercent     	(int memoryType) { TriggerDebugOutput(1, StringToText("Memory Usage (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + FixedToText(IntToFixed(memoryTypeSize[memoryType] - releasedMemory[memoryType])/IntToFixed(memoryTypeSize[memoryType])*100, 2) + StringToText("%"), false); }
//void printHeapSize              	(int memoryType) { TriggerDebugOutput(1, StringToText("Heap Size (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + IntToText(heapGetSize(memoryTypeName[memoryType])), false); }

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - initialization
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
	void init_mem_alloc() {
		mem_gen_free(free_arr);
		mem_gen_free(mem_push);
	
		init_mem();
		init_mem_alloc_new();
	} //initializeMemoryAllocation