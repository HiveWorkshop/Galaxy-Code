#1: main method
#2: auto include all used script files
#3: dependencies (auto order libraries)
#4: internal (static keyword, each namespace is its own file)
#5: all code not in namespace is merged into the main script file (global)
#6: initializers
	{ } //auto runs

---------------------------
.lib files that contain code in encrypted form
.lib files can be used to protect code and can be used for nice inclusions (auto correct ordering, auto include required libs, etc)
.lib files may depend on other .lib files
.lib files may include a url where .lib file is stored
.lib files include a version

whenever a project is opened
	all .lib files are checked for updates and then updated

support multiple languages

#language = Galaxy {
}

#language = GalaxyOO {
}

switch between grammars for each language (to a degree). Antlr supports turning portions of grammar on/off, which is
totally awesome

-----------------------------
regex
printf

----------------------------
#
#{ }

language == preprocessor variable
int i = 5;
int b = 6;
#print("int c = i + b");
#int c = 6;
int c = 5;
#print(tostring(c)); //6, # will look at the preprocessor stuff
c = #{print(tostring(c));};

---------------------------------
{ } implies scope, whether preprocessor or not

run preprocessor statements and code at the same time

as { } implies scope

name { } names that scope (like namespace)

(){ } would be an anonymous function

code that is not in a function is automatically executed for the scope that it's inside of (all gathered into
one function of common scope)

therefor { } can be placed anywhere and anything can go inside of it
furthermore, can do statements like (keep in mind that these aren't in functions)

int x = 5;
while (x < 10) { runSomething(); }

the above would translate into
int x = 5;
initFunc1() { while (++x < 10) { runSomething(); }

inline keyword
automatically inline functions that follow specific rules (inline keyword or not)
if the inline is keyword, then follow different inlining techniques

if a variable in the function is set and it is not a reference, create a copy of that variable and set the copy, this
way the original variable isn't changed

inline void do(int v) { v = v + 1; }

test() {
	int v = 5;
	do(v);
}

translates to

test() {
	int v = 5;
	int loc1;
	loc1 = v;
	loc1 = loc1 + 1;
}

if (bool || ++x == 1) {
} //if

translates to

bool loc1;
loc1 = bool;
if (loc1) {
	x = x + 1;
	if (x == 1) {
	}
}

if (bool1 && bool2 && x++ == 2 || bool3 && ++x == 1) {
	//code
}

to


bool loc1 = bool1;
bool loc2 = bool2;
bool loc3 = bool3;
if (bool1 && bool2 || bool3) {
	if (bool3) {
		x = x + 1;
	}
	if (bool1 && bool2 && x == 2 || bool3 && x == 1) {
		if (bool1 && bool2) {
			x = x + 1;
		}

		//code
	}
} //if

while (++x < 5) { }

to

while (true) {
	x = x + 1;
	if (x < 5) {
	}
	else { break; }
}

while (x++ < 5) {
}

to

while (x < 5) {
	x = x + 1;
}
x = x + 1;
