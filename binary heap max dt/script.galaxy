//heap position neighbor getters
static int  getParentPosition   (int position)		{ return position >> 1;			}
static int  getLeftPosition     (int position)		{ return position << 1;			}
static int  getRightPosition    (int position)		{ return (position << 1) + 1;	}

static void setPointer(int pointerPosition, int pointer, string heapName) {
	DataTableSetInt(true, heapName + IntToString(pointerPosition) + "HEAP_P0", pointer);
} //setPointer
static int getPointer(int pointerPosition, string heapName) {
	return DataTableGetInt(true, heapName + IntToString(pointerPosition) + "HEAP_P0");
} //getPointer

static void setPosition(int pointer, int pointerPosition, string heapName) {
	DataTableSetInt(true, heapName + IntToString(pointer) + "HEAP_P", pointerPosition);
} //setPointer
static int getPosition(int pointer, string heapName) {
	return DataTableGetInt(true, heapName + IntToString(pointer) + "HEAP_P");
} //getPointer

static void setWeight(int pointer, int weight) {
	DataTableSetInt(true, IntToString(pointer) + "HEAP_W", weight);
} //setPointer
static int getWeight(int pointer) {
	return DataTableGetInt(true, IntToString(pointer) + "HEAP_W");
} //getPointer

static void setSize(int size, string heapName) {
	DataTableSetInt(true, heapName + "HEAP_S", size);
} //setPointer
static int getSize(string heapName) {
	return DataTableGetInt(true, heapName + "HEAP_S");
} //getPointer

//link pointer position with pointer
static void link(int pointer, int pointerPosition, string heapName) {
	setPointer  (pointerPosition, pointer, heapName);
	setPosition (pointer, pointerPosition, heapName);
} //link

static void bubbleUp(int pointer, int pointerWeight, int pointerPosition, string heapName) {
	int parentPosition  = getParentPosition(pointerPosition);
	int parentPointer   = getPointer(parentPosition, heapName);

	while (0 != parentPosition && getWeight(parentPointer) < pointerWeight) {
		link(parentPointer, pointerPosition, heapName);

		pointerPosition     = parentPosition;
		parentPosition      = getParentPosition (pointerPosition);
		parentPointer       = getPointer        (parentPosition, heapName);
	} //while

	link(pointer, pointerPosition, heapName);
} //bubbleUp

static void bubbleDown(int pointer, int pointerWeight, int pointerPosition, string heapName, int size) {
	int leftPosition;
	int leftPointer;
	int leftWeight;

	int rightPosition;
	int rightPointer;
	int rightWeight;

	while (pointerPosition < size) {
		leftPosition    = getLeftPosition   (pointerPosition);
		leftPointer     = getPointer        (leftPosition, heapName);
		leftWeight      = getWeight     	(leftPointer);

		rightPosition   = getRightPosition  (pointerPosition);
		rightPointer    = getPointer        (rightPosition, heapName);
		rightWeight     = getWeight     	(rightPointer);
	
		if (leftWeight > pointerWeight && leftWeight >= rightWeight) {
			link(leftPointer, pointerPosition, heapName);
			pointerPosition = leftPosition;
		} //if
		else if (rightWeight > pointerWeight) {
			link(rightPointer, pointerPosition, heapName);
			pointerPosition = rightPosition;
		} //else if
		else {
			break;
		} //else
	} //while

	link(pointer, pointerPosition, heapName);
} //bubbleDown

int heapGetWeight(int pointer) { return getWeight(pointer); }
int heapGetSize(string heapName) { return getSize(heapName); }
int heapGetFirst(string heapName) { return getPointer(1, heapName); }

void heapRemove(int pointer, string heapName) {
	int size;
	int replace;
	int weight;
	
	size = getSize(heapName);
	setSize(size - 1, heapName);
	
	replace = getPointer(size, heapName);
	
	link(0, size, heapName);
	
	weight = getWeight(pointer);
	setWeight(pointer, 0);
	setWeight(pointer + weight - 1, 0);
	
	weight = getWeight(replace);
	
	bubbleUp(replace, weight, getPosition(pointer, heapName), heapName);
	bubbleDown(replace, weight, getPosition(replace, heapName), heapName, size);
} //heapRemove

void heapChangeWeight(int pointer, int newWeight, string heapName) {
	int oldWeight = getWeight(pointer);
	
	setWeight(pointer + oldWeight - 1, 0);
	setWeight(pointer, newWeight);
	setWeight(pointer + newWeight - 1, newWeight);
	
	if (newWeight > oldWeight) {
		bubbleUp(pointer, newWeight, getPosition(pointer, heapName), heapName);
	} //if
	else {
		bubbleDown(pointer, newWeight, getPosition(pointer, heapName), heapName, getSize(heapName));
	} //else
} //heapUpdate

static int defragment(int pointer, int pointerSize, string heapName, int min, int max, int size) {
	bool add = false;
	int pointer2;
	int pointer2size;

	pointer2 = pointer - 1;
	pointer2size = heapGetWeight(pointer2);
	if (pointer2 >= min && 0 != pointer2size) {
		pointer = pointer2 - pointer2size + 1;
		pointerSize = pointerSize + pointer2size;
		
		setWeight(pointer2, 0);
	} //if
	else {
		add = true;
	} //else

	pointer2 = pointer + pointerSize;
	pointer2size = heapGetWeight(pointer2);
	if (pointer2 <= max && 0 != pointer2size) {
		if (!add) {
			heapRemove(pointer2, heapName);
			setWeight(pointer + pointerSize - 1, 0);
		} //if
		else {
			setPosition(pointer, getPosition(pointer2, heapName), heapName);
			setWeight(pointer2, 0);
		
			add = false;
		} //else
		
		pointerSize = pointerSize + pointer2size;
	} //if
	
	if (add) {
		setPosition(pointer, size, heapName);
		setSize(size, heapName);
	} //if
	
	setWeight(pointer, pointerSize);
	setWeight(pointer + pointerSize - 1, pointerSize);
	
	return pointer;
} //defragment

void heapInsert(int pointer, int weight, string heapName, int min, int max) {
	pointer = defragment(pointer, weight, heapName, min, max, getSize(heapName) + 1);
	bubbleUp(pointer, getWeight(pointer), getPosition(pointer, heapName), heapName);
} //heapInsert

int heapValidate(string heapName) {
	int errors = 0;
	int position = getSize(heapName);
	bool[25000] duplicates;
	
	while (position > 1) {
		if (duplicates[getPointer(position, heapName)]) {
			errors = errors + 1;
		} //if
		if (getWeight(getPointer(getParentPosition(position), heapName)) < getWeight(getPointer(position, heapName))) {
			errors = errors + 1;
		} //if
		
		duplicates[getPointer(position, heapName)] = true;
		
		position = position - 1;
	} //while
	
	return errors;
} //heapValidate