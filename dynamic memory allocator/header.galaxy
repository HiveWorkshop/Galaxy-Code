//currently supported
//
//	int arrays
//	all scalars
//
//need to support
//
//	allocating scalars w/o pointers (useful for refs)
//	allocating arrays w/o pointers 	(useful for colletions)

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//	Pointer Fields
//
//		0:
//
//			destructor == 4096 + (<< 18 >> 18)
//			data == >> 13
//
//		1:
//
//			type == 4096 + (<< 18 >> 18)
//			size == >> 13
//
//
//	Max Memory Size:	262144
//	Max Array Size:  	262144
//	Max Types (custom?)	4096
//	Max Destructors		4096
//
//		void free(int ptr)
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Memory Types
//
    const int mem_type_count           		= 32;

	const int mem_type_unknown				= -1;
	const int mem_type_abilcmd           	=  0;
	const int mem_type_actor             	=  1;
	const int mem_type_actorscope        	=  2;
	const int mem_type_aifilter          	=  3;
	const int mem_type_bank              	=  4;
	const int mem_type_bool              	=  5;
	const int mem_type_byte              	=  6;
	const int mem_type_camerainfo        	=  7;
	const int mem_type_color             	=  8;
	const int mem_type_doodad            	=  9;
	const int mem_type_fixed             	= 10;
	const int mem_type_int               	= 11;
	const int mem_type_marker            	= 12;
	const int mem_type_order             	= 13;
	const int mem_type_playergroup       	= 14;
	const int mem_type_point             	= 15;
	const int mem_type_region            	= 16;
	const int mem_type_revealer          	= 17;
	const int mem_type_sound             	= 18;
	const int mem_type_soundlink         	= 19;
	const int mem_type_string            	= 20;
	const int mem_type_text              	= 21;
	const int mem_type_timer             	= 22;
	const int mem_type_transmissionsource	= 23;
	const int mem_type_trigger           	= 24;
	const int mem_type_unit              	= 25;
	const int mem_type_unitfilter        	= 26;
	const int mem_type_unitgroup         	= 27;
	const int mem_type_unitref           	= 28;
	const int mem_type_wave              	= 29;
	const int mem_type_waveinfo          	= 30;
	const int mem_type_wavetarget        	= 31;
// 
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  memory sizes
//
	const int mem_size_abilcmd           	=     1;
	const int mem_size_actor             	=     1;
	const int mem_size_actorscope        	=     1;
	const int mem_size_aifilter          	=     1;
	const int mem_size_bank              	=     1;
	const int mem_size_bool              	=     2000;
	const int mem_size_byte              	=     2000;
	const int mem_size_camerainfo        	=     1;
	const int mem_size_color             	=     200;
	const int mem_size_doodad            	=     1;
	const int mem_size_fixed             	=     8000;
	const int mem_size_int               	=     175000;	//used for pointers, 2 extra integers allocated per allocation
	const int mem_size_marker            	=     1;
	const int mem_size_order             	=     1;
	const int mem_size_playergroup       	=     1;
	const int mem_size_point             	=     1;
	const int mem_size_region            	=     1;
	const int mem_size_revealer          	=     1;
	const int mem_size_sound             	=     1;
	const int mem_size_soundlink         	=     1;
	const int mem_size_string            	=     2000;
	const int mem_size_text              	= 	  1;
	const int mem_size_timer             	=     1;
	const int mem_size_transmissionsource	=     1;
	const int mem_size_trigger           	=     1;
	const int mem_size_unit              	=     8000;
	const int mem_size_unitfilter        	=     1;
	const int mem_size_unitgroup         	=     1000;
	const int mem_size_unitref           	=     1;
	const int mem_size_wave              	=     1;
	const int mem_size_waveinfo          	=     1;
	const int mem_size_wavetarget        	=     1;
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Memory arrays
//
	abilcmd[mem_size_abilcmd]						mem_abilcmd;
	actor[mem_size_actor]							mem_actor;
	actorscope[mem_size_actorscope]					mem_actorscope;
	aifilter[mem_size_aifilter]						mem_aifilter;
	bank[mem_size_bank]								mem_bank;
	bool[mem_size_bool]								mem_bool;
	byte[mem_size_byte]								mem_byte;
	camerainfo[mem_size_camerainfo]					mem_camerainfo;
	color[mem_size_color]							mem_color;
	doodad[mem_size_doodad]							mem_doodad;
	fixed[mem_size_fixed]							mem_fixed;
	int[mem_size_int + 1]							mem_int;
	marker[mem_size_marker]							mem_marker;
	order[mem_size_order]							mem_order;
	playergroup[mem_size_playergroup]				mem_playergroup;
	point[mem_size_point]							mem_point;
	region[mem_size_region]							mem_region;
	revealer[mem_size_revealer]						mem_revealer;
	sound[mem_size_sound]							mem_sound;
	soundlink[mem_size_soundlink]					mem_soundlink;
	string[mem_size_string]							mem_string;
	text[mem_size_text]								mem_text;
	timer[mem_size_timer]							mem_timer;
	transmissionsource[mem_size_transmissionsource] mem_transmissionsource;
	trigger[mem_size_trigger]						mem_trigger;
	unit[mem_size_unit]								mem_unit;
	unitfilter[mem_size_unitfilter]					mem_unitfilter;
	unitgroup[mem_size_unitgroup]					mem_unitgroup;
	unitref[mem_size_unitref]						mem_unitref;
	wave[mem_size_wave]								mem_wave;
	waveinfo[mem_size_waveinfo]						mem_waveinfo;
	wavetarget[mem_size_wavetarget]					mem_wavetarget;
	
	void free(int ptr);
	funcref<free>[4096] 							mem_free;
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Functions
//
//		general free -> mem_free[0]
//		scalar free -> mem_free[1]
//
			int malloc(int size, int type);
			void free(int ptr);
			void freeEx(int ptr, int type);
//
//				will work on either scalars or sequences
//
			int mem_pop(int type);
			void mem_push(int ptr);
//
//				used to work with scalars
//				allocates from stack, deallocates to stack
//
			void heap_push(int ptr);
//
//				used to work with sequences
//				deallocate to heap
//
		
		int sizeof(int ptr);	//retrieve size of scalar or sequence data in pointer
		int typeof(int ptr);    //retrieve type of scalar or sequence data in pointer
		int datof(int ptr);		//retrieve scalar or sequence stored in pointer
		
		void set_dest(int ptr, int dest);
//
//			WARNING
//
//				No memory will automatically be freed
//
//				Be sure to call freeEx
//
		void set_type(int ptr, int type);
//
//			WARNING
//
//				Setting the type will cause serious problems in deallocation
//
//				Use a custom destructor
//
//
//                            DEBUG (not supported yet)
//      ---------------------------------------------------------
        //int getRemainingMemory          (int memoryType);
//
//          retrieve free memory
//
        //int getBiggestAllocBlock        (int memoryType);
//
//          retrieves the size of the biggest
//          array that can be allocated without overflowing
//
//          this is usually not equal to free memory as the heap
//          is likely fragmented
//
        //void printMemoryRemaining       (int memoryType);
//
//          prints remaining memory
//
        //void printMemoryUsed            (int memoryType);
//
//          prints used memory
//
        //void printMemoryUsedPercent     (int memoryType);
//
//          prints remaining memory as percent
//
        //void printHeapSize              (int memoryType);
//
//          prints the heap's current size (number of sequences)
//          the larger this number, the more fragmented the heap is