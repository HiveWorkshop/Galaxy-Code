void heapSort(int arr, funcref<compareDelegate> compare)
{
	int n = sizeof(arr);
	int i = n >> 1;
	int parent;
	int child;
	int t;
	
	arr = getMemoryBlockAddress(arr, MEMORY_TYPE_INT);

	while (true) {
		if (i > 0) { 				// First stage - Sorting the heap
			i = i - 1;           		// Save its index to i
			t = memoryInt[arr + i];		// Save parent value to t
		} 
		else {     								// Second stage - Extracting elements in-place
			n = n - 1;           					// Make the new heap smaller
			if (n == 0) { return; } 				// When the heap is empty, done
			t = memoryInt[arr + n];					// Save last value (it will be overwritten)
			memoryInt[arr + n] = memoryInt[arr];	// Save largest value at the end of arr
		}

		parent = i; 		// start pushing down t from parent
		child = i*2 + 1; 	// parent's left child

		// Sift operation - pushing the value of t down the heap
		while (child < n) {
			if (child + 1 < n  &&  compare(memoryInt[arr + child + 1], memoryInt[arr + child]) > 0) {
				child = child + 1; 		// Choose the largest child
			}
			if (compare(memoryInt[arr + child], t) > 0) {				// If any child is bigger than the parent
				memoryInt[arr + parent] = memoryInt[arr + child]; 			// Move the largest child up
				parent = child; 											// Move parent pointer to this child
				child = parent*2 + 1; 										// Find the next child
			} 
			else {
				break; // t's place is found
			}
		}
		memoryInt[arr + parent] = t; // save t in the heap
	}
}