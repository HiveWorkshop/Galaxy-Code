//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constants
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
static const int NEXT = 0;
static const int PREV = 1;
static const int DATA = 2;
static const int COUNT = 2;
static const int MEMORY_TYPE = 3;

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - getters
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int listGetNext(int node)       		{ return memoryInt[node];           												}
int listGetPrev(int node)       		{ return memoryInt[node + PREV];    												}
int listGetPointerBlock(int node)       { return memoryInt[node + DATA];    												}
int listGetPointer(int list, int node)	{ return getPointerAddress(memoryInt[node + DATA], memoryInt[list + MEMORY_TYPE]); 	}
int listGetCount(int list)      		{ return memoryInt[list + COUNT];   												}
int listGetMemoryType(int list)			{ return memoryInt[list + MEMORY_TYPE]; 											}

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - functions
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int listPushBackBlock(int list) {
    int node    = getMemoryBlockAddress(allocate(3, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
    int last    = memoryInt[list + PREV];

    memoryInt[node + DATA] = getMemoryBlockAddress(allocate(1, memoryInt[list + MEMORY_TYPE]), memoryInt[list + MEMORY_TYPE]);

    memoryInt[node] = list;
    memoryInt[node + PREV] = last;
    memoryInt[last] = node;
    memoryInt[list + PREV] = node;

    memoryInt[list + COUNT] = memoryInt[list + COUNT] + 1;
	
	return memoryInt[node + DATA];
} //listPushBackBlock

int listPushFrontBlock(int list) {
    int node    = getMemoryBlockAddress(allocate(3, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
    int first   = memoryInt[list];

    memoryInt[node + DATA] = getMemoryBlockAddress(allocate(1, memoryInt[list + MEMORY_TYPE]), memoryInt[list + MEMORY_TYPE]);

    memoryInt[node] = first;
    memoryInt[node + PREV] = list;
    memoryInt[list] = node;
    memoryInt[first + PREV] = node;

    memoryInt[list + COUNT] = memoryInt[list + COUNT] + 1;
	
	return memoryInt[node + DATA];
} //listPushFrontBlock

int listPushFront(int list) { return getPointerAddress(listPushFrontBlock(list), memoryInt[list + MEMORY_TYPE]); 	}
int listPushBack(int list) { return getPointerAddress(listPushBackBlock(list), memoryInt[list + MEMORY_TYPE]); 		}

void listRemove(int list, int node) {
    if (list == node) { return; }

    memoryInt[memoryInt[node] + PREV] = memoryInt[node + PREV];
    memoryInt[memoryInt[node + PREV]] = memoryInt[node];
    memoryInt[list + COUNT] = memoryInt[list + COUNT] - 1;
	
	deallocateEx(getPointerAddress(memoryInt[node + DATA], memoryInt[list + MEMORY_TYPE]), memoryInt[list + MEMORY_TYPE]);
    deallocateEx(getPointerAddress(node, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //listRemove

void listPopBack(int list) 	{ listRemove(list, memoryInt[list + PREV]); 	}
void listPopFront(int list) { listRemove(list, memoryInt[list]); 			}

void listClear(int list) {
    int node = memoryInt[list];
	int memoryType = memoryInt[list + MEMORY_TYPE];
	
	memoryInt[list] = list;
    memoryInt[list + PREV] = list;

    memoryInt[list + COUNT] = 0;

    while (node != list) {
		list = memoryInt[node];
		deallocateEx(getPointerAddress(memoryInt[node + DATA], memoryType), memoryType);
        deallocateEx(getPointerAddress(node, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
        node = list;
    } //while
} //listClear

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constructor
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int listCreate(int memoryType) {
    int list = getMemoryBlockAddress(allocate(4, MEMORY_TYPE_INT), MEMORY_TYPE_INT);

    memoryInt[list] = list;
    memoryInt[list + PREV] = list;

    memoryInt[list + COUNT] = 0;
	memoryInt[list + MEMORY_TYPE] = memoryType;

    return list;
} //listCreate

void listDestroy(int list) {
    listClear(list);

    deallocateEx(getPointerAddress(list, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //listDestroy