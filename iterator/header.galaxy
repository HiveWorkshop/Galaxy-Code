//
//	Use these prototypes for general collections when coding generic algorithms
//
//	Collections should implement these prototypes for generic iteration
//
//
//		//useful function
//
//			//void setPointerValueBlockEx(int blockAddress, int blockAddressValue, int memoryType);
//
//		int findMax(int collection, funcref<getSentinelDelegate> getSentinel, funcref<getNextDelegate> getNext, funcref<getFirstDelegate> getFirst, funcref<getDataTypeDelegate> getDataType, funcref<getDataDelegate> getData, funcref<compareDelegate> compare, funcref<getPointerDelegate> getPointer) {
//			int sentinel = getSentinel(collection);
//			int position = getFirst(collection);
//			int dataType = getDataType(collection);		//assume all values in collection are of same type
//														//this may not be the case for very complicated collections
//
//			int data;
//			int max = -1;
//
//			while (!atSentinel(sentinel, position)) {
//
//				data = getData(position);
//
//				if (max == -1) {
//					max = data;
//				} //if
//				else if (compare(data, max) > 0) {
//					max = data;
//				} //else if
//
//				position = getNext(position);
//			} //while
//
//			return getPointer(max);
//		} //findMax

int compareDelegate(int value1, int value2);	//for comparisons
int getSentinelDelegate(int collection);			//for iteration
int getNextDelegate(int position);					//for iteration
int getFirstDelegate(int collection);				//for iteration
int getDataDelegate(int position);					//for general
int getDataTypeDelegate(int collection, int data)	//for general
int getPointerDelegate(int data, int dataType)		//convert data back to general pointer

//general collection functions
int compareInt(int value1, int value2) 					{ return value1 - value2; 												}		//int
int getNextArray(int position)							{ return position + 1;													}		//array
int getFirstArray(int collection)						{ return getMemoryBlockAddress(collection, getMemoryType(collection));	}		//convert pointer to memory block address
int getSentinelArray(int collection)					{ return collection + sizeof(collection); 								}		//array
int getDataArray(int position)							{ return position;														}		//if it's memory block, this is all that's needed
int getDataTypeArray(int collection, int position)		{ return getMemoryType(collection);										}		//generally useful

bool atSentinel(int sentinel, int position)				{ return sentinel != position; 											}