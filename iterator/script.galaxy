//External Delegates
static const int ITERATOR_IS_GOOD = 0;
static const int ITERATOR_RESET = 1;
static const int ITERATOR_GET_NEXT = 2;
static const int ITERATOR_GET_VALUE = 3;
static const int ITERATOR_GET_TYPE = 4;

//Internal Integers
static const int ITERATOR_DELEGATES = 4;

int iteratorTypeCreate(funcref<delegate> isGood, funcref<delegate> reset, funcref<delegate> getNext, funcref<delegate> getValue, funcref<delegate> getType) {
	int iteratorType = getMemoryBlockAddress(allocate(5, MEMORY_TYPE_DELEGATE), MEMORY_TYPE_DELEGATE);
	
	memoryDelegate[iteratorType] = isGood;
	memoryDelegate[iteratorType + ITERATOR_RESET] = reset;
	memoryDelegate[iteratorType + ITERATOR_GET_NEXT] = getNext;
	memoryDelegate[iteratorType + ITERATOR_GET_VALUE] = getValue;
	memoryDelegate[iteratorType + ITERATOR_GET_TYPE] = getType;
	
	return iteratorType;
} //iteratorTypeCreate

int iteratorCreate(int collection, int iteratorType) {
	int iterator = getMemoryBlockAddress(allocate(5, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
	
	memoryInt[iterator] = collection;
	memoryInt[iterator + ITERATOR_DELEGATES] = iteratorType;
	memoryInt[iterator + ITERATOR_DATA] = 0;
	memoryInt[iterator + ITERATOR_MEMORY_TYPE] = memoryDelegate[iteratorType + ITERATOR_GET_TYPE](collection);
	
	memoryDelegate[iteratorType + ITERATOR_RESET](iterator);
	
	return iterator;
} //iteratorCreate

void iteratorDestroy(int iterator) {
	if (memoryInt[iterator + ITERATOR_DATA] != 0) {
		deallocateEx(getPointerAddress(memoryInt[iterator + ITERATOR_DATA], MEMORY_TYPE_INT), MEMORY_TYPE_INT);
	} //if
	deallocateEx(getPointerAddress(iterator, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //iteratorDestory

int iteratorGetNext(int iterator) {
	return memoryDelegate[memoryInt[iterator + ITERATOR_DELEGATES] + ITERATOR_GET_NEXT](iterator);
}

int iteratorGetValue(int iterator) {
	return memoryDelegate[memoryInt[iterator + ITERATOR_DELEGATES] + ITERATOR_GET_VALUE](iterator);
}

bool iteratorIsGood(int iterator) {
	return 0 != memoryDelegate[memoryInt[iterator + ITERATOR_DELEGATES]](iterator);
} //iteratorHasNext

void iteratorReset(int iterator) { memoryDelegate[memoryInt[iterator + ITERATOR_DELEGATES] + ITERATOR_RESET](iterator); }