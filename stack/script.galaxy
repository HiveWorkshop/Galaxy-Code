//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constants
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
static const int NEXT 			= 0;
static const int MEMORY_TYPE 	= 1;
static const int DATA 			= 1;

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - getters
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int stackGetNext(int node)      			{ return memoryInt[node];      														}

int stackGetPointer(int stack, int node)	{ return getPointerAddress(memoryInt[node + DATA], memoryInt[stack + MEMORY_TYPE]); }
int stackGetPointerBlock(int node)      	{ return memoryInt[node + DATA];    												}


//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - functions
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int stackPushBlock(int stack) {
    int node = getMemoryBlockAddress(allocate(2, MEMORY_TYPE_INT), MEMORY_TYPE_INT);

    memoryInt[node + DATA] = getMemoryBlockAddress(allocate(1, memoryInt[stack + MEMORY_TYPE]), memoryInt[stack + MEMORY_TYPE]);

    memoryInt[node] = memoryInt[stack];
    memoryInt[stack] = node;
	
	return memoryInt[node + DATA];
} //stackPushBlock

int stackPush(int stack) {
	return getPointerAddress(stackPushBlock(stack), memoryInt[stack + MEMORY_TYPE]);
} //stackPush

void stackPop(int stack) {
    int node = memoryInt[stack];

    if (-1 == node) { return; }

	memoryInt[stack] = memoryInt[node];
	
	deallocateEx(getPointerAddress(memoryInt[node + DATA], memoryInt[stack + MEMORY_TYPE]), memoryInt[stack + MEMORY_TYPE]);
    deallocateEx(getPointerAddress(node, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //stackPop

void stackClear(int stack) {
    int node = memoryInt[stack];
	int memoryType = memoryInt[stack + MEMORY_TYPE];

	memoryInt[stack] = -1;
    while (node != -1) {
		stack = memoryInt[node];
		deallocateEx(getPointerAddress(memoryInt[node + DATA], memoryType), memoryType);
        deallocateEx(getPointerAddress(node, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
        node = stack;
    }
} //stackClear

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constructor
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int stackCreate(int memoryType) {
    int stack = getMemoryBlockAddress(allocate(2, MEMORY_TYPE_INT), MEMORY_TYPE_INT);

    memoryInt[stack] 				= -1;
	memoryInt[stack + MEMORY_TYPE] 	= memoryType;

    return stack;
} //stackCreate

void stackDestroy(int stack) {
    stackClear(stack);

    deallocateEx(getPointerAddress(stack, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //stackDestroy