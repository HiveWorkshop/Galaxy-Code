//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constants
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
static const int NEXT = 0;
static const int PREV = 1;
static const int DATA = 2;
static const int COUNT = 2;

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - getters
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int listGetNext(int node)       { return memoryInt[node];           }
int listGetPrev(int node)       { return memoryInt[node + PREV];    }
int listGetData(int node)       { return memoryInt[node + DATA];    }
int listGetCount(int list)      { return memoryInt[list + COUNT];   }

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - functions
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
bool listHas(int list, int data) {
    int node = memoryInt[list + NEXT];

    while (node != list && memoryInt[node] != data) { node = memoryInt[node + NEXT]; }

    return memoryInt[node + DATA] == data;
} //listHas

int listCountData(int list, int data) {
    int node = memoryInt[list + NEXT];
    int count = 0;

    while (node != list) {
        if (memoryInt[node + DATA] == data) { count = count + 1; }

        node = memoryInt[node + NEXT];
    } //while

    return count;
} //listCountData

void listAdd(int list, int data) {
    int node    = getMemoryBlockAddress(allocate(3, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
    int last    = memoryInt[list + PREV];

    memoryInt[node + DATA] = data;

    memoryInt[node + NEXT] = list;
    memoryInt[node + PREV] = last;
    memoryInt[last + NEXT] = node;
    memoryInt[list + PREV] = node;

    memoryInt[list + COUNT] = memoryInt[list + COUNT] + 1;
} //listAdd

void listRemove(int list, int data) {
    int node = memoryInt[list + NEXT];

    while (node != list && memoryInt[node + DATA] != data) { node = memoryInt[node + NEXT]; }

    if (memoryInt[node + DATA] != data) { return; }

    memoryInt[memoryInt[node + NEXT] + PREV] = memoryInt[node + PREV];
    memoryInt[memoryInt[node + PREV] + NEXT] = memoryInt[node + NEXT];

    memoryInt[list + COUNT] = memoryInt[list + COUNT] - 1;

    deallocateEx(getPointerAddress(node, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //listRemove

void listClear(int list) {
    int node = memoryInt[list + NEXT];

    while (node != list) {
        deallocate(getPointerAddress(node, MEMORY_TYPE_INT));
        node = memoryInt[node + NEXT];
    } //while

    memoryInt[list + NEXT] = list;
    memoryInt[list + PREV] = list;

    memoryInt[list + COUNT] = 0;
} //listClear

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - constructor
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int listCreate() {
    int list = getMemoryBlockAddress(allocate(3, MEMORY_TYPE_INT), MEMORY_TYPE_INT);

    memoryInt[list + NEXT] = list;
    memoryInt[list + PREV] = list;

    memoryInt[list + COUNT] = 0;

    return list;
} //listCreate

void listDestroy(int list) {
    listClear(list);

    deallocateEx(getPointerAddress(list, MEMORY_TYPE_INT), MEMORY_TYPE_INT);
} //listDestroy